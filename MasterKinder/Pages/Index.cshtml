@page
@model MasterKinder.Pages.IndexModel
@{
    ViewData["Title"] = "Survey Responses";
}

<h5>Fråga mig om förskola (2023)</h5>
<div>
    <input id="address" type="textbox" placeholder="Enter your address" value="Sergels torg 1, 111 57 Stockholm, Sverige">
    <input type="button" value="Find Preschools" onclick="geocodeAddress(new google.maps.Geocoder(), map)">
</div>

<div class="map-container">
    <div id="map"></div>
    <div id="right-panel"></div>
</div>

<form method="post">
    <div>
        <label for="questionSelect">Select Question:</label>
        <select id="questionSelect" name="SelectedQuestion" asp-for="SelectedQuestion" asp-items="@(new SelectList(Model.Questions))">
            <option value="">-- Select a question --</option>
        </select>
    </div>
    <div>
        <label for="forskoleverksamhetSelect">Select Förskoleverksamhet:</label>
        <select id="forskoleverksamhetSelect" name="SelectedForskoleverksamhet" asp-for="SelectedForskoleverksamhet" asp-items="@(new SelectList(Model.Forskoleverksamheter))">
            <option value="">-- Select Förskoleverksamhet --</option>
        </select>
    </div>
    <div class="sleep">
        <div id="loadingSpinner" style="display: none;">
            <div class="spinner"></div>
        </div>

        <button id="loginButton" onclick="startLoginProcess()" type="submit" asp-page-handler="SelectQuestion">Sök</button>
    </div>
</form>

@if (Model.SearchPerformed)
{
    <h5>Antal svar: @Model.TotalResponses</h5>
    @if (Model.ResponsePercentages != null && Model.ResponsePercentages.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Resultat</th>
                    <th>Procent</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var response in Model.ResponsePercentages)
                {
                    <tr>
                        <td>@response.Key</td>
                        <td>@string.Format("{0:0.00} %", response.Value)</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No data available for the selected question and förskoleverksamhet.</p>
    }
}

<script>
    var map;
    var service;
    var infowindow;
    var directionsService;
    var directionsRenderer;

    function initMap() {
        var stockholm = new google.maps.LatLng(59.3293, 18.0686);

        map = new google.maps.Map(document.getElementById('map'), {
            center: stockholm,
            zoom: 12
        });

        infowindow = new google.maps.InfoWindow();
        directionsService = new google.maps.DirectionsService();
        directionsRenderer = new google.maps.DirectionsRenderer({
            draggable: true,
            map: map,
            panel: document.getElementById('right-panel')
        });
    }

    function geocodeAddress(geocoder, resultsMap) {
        var address = document.getElementById('address').value;
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status === 'OK') {
                resultsMap.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    map: resultsMap,
                    position: results[0].geometry.location
                });
                findNearbyPreschools(results[0].geometry.location, results[0].geometry.location);
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
                console.error('Geocode error: ', status);
            }
        });
    }

    function findNearbyPreschools(location, origin) {
        var request = {
            location: location,
            radius: '2000', // 2 kilometers
            keyword: 'förskola' // Swedish word for preschool
        };

        service = new google.maps.places.PlacesService(map);
        if (service) {
            service.nearbySearch(request, function (results, status) {
                if (status === google.maps.places.PlacesServiceStatus.OK) {
                    console.log('Nearby search results: ', results); // Log results for debugging
                    for (var i = 0; i < results.length; i++) {
                        createMarker(results[i], origin);
                    }
                } else {
                    alert('Places API was not successful for the following reason: ' + status);
                    console.error('Places API error: ', status);
                }
            });
        } else {
            alert('PlacesService is not available');
            console.error('PlacesService is undefined');
        }
    }

    function createMarker(place, origin) {
        var placeLoc = place.geometry.location;
        var marker = new google.maps.Marker({
            map: map,
            position: placeLoc
        });

        google.maps.event.addListener(marker, 'click', function () {
            infowindow.setContent(place.name);
            infowindow.open(map, this);
            calculateAndDisplayRoute(origin, placeLoc);
        });
    }

    function calculateAndDisplayRoute(origin, destination) {
        var request = {
            origin: origin,
            destination: destination,
            travelMode: 'DRIVING'
        };
        directionsService.route(request, function (result, status) {
            if (status === 'OK') {
                directionsRenderer.setDirections(result);
            } else {
                alert('Directions request failed due to ' + status);
                console.error('Directions request error: ', status);
            }
        });
    }
</script>
